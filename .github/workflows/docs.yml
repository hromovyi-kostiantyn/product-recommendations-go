name: Generate and Deploy Documentation

on:
  push:
    branches:
      - main
      - master
      - develop
    paths:
      - '**.go'
      - 'docs/**'
      - '.github/workflows/docs.yml'

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: pages
  cancel-in-progress: true

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Install pkgsite
        run: go install golang.org/x/pkgsite/cmd/pkgsite@latest

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Install OpenAPI generator
        run: npm install -g @openapitools/openapi-generator-cli

      - name: Run go fmt
        run: go fmt ./...

      - name: Generate API documentation
        run: |
          mkdir -p docs/api
          if [ -f "docs/openapi.yaml" ]; then
            cp docs/openapi.yaml docs/api/
            openapi-generator-cli generate -i docs/openapi.yaml -g html2 -o docs/api/html
            openapi-generator-cli generate -i docs/openapi.yaml -g markdown -o docs/api/markdown
            echo "OpenAPI documentation generated successfully"
          else
            echo "No OpenAPI specification found at docs/openapi.yaml. Skipping OpenAPI documentation generation."
            # Create a placeholder file to ensure the directory isn't empty
            echo "# API Documentation" > docs/api/README.md
            echo "OpenAPI specification file not found." >> docs/api/README.md
          fi

      - name: Generate code documentation
        run: |
          mkdir -p docs/code
          TEMP_DIR=$(mktemp -d)
          cd ${TEMP_DIR}
          
          # Clone the repo directly instead of using go get
          git clone https://github.com/hromovyi-kostiantyn/product-recommendations-go.git
          cd product-recommendations-go
          git checkout ${GITHUB_SHA}
          
          # Go back to temp dir
          cd ..
          
          # Initialize a module for pkgsite
          go mod init example.com/docs
          # Add a replace directive to use the local copy instead of trying to download
          echo "replace github.com/hromovyi-kostiantyn/product-recommendations-go => ./product-recommendations-go" >> go.mod
          go mod tidy
          
          # Generate the documentation
          mkdir -p site
          pkgsite -dir=site -open=false ./product-recommendations-go
          
          # Copy the generated docs
          if [ -d "site" ] && [ "$(ls -A site)" ]; then
            cp -r site/* ../../docs/code/
          else
            echo "# Code Documentation" > ../../docs/code/README.md
            echo "Documentation generation failed. Please check the repository structure." >> ../../docs/code/README.md
          fi
          
          cd ../../

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4  # Updated from v3 to v4

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3  # Updated from v2 to v3

  deploy-docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: generate-docs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # Updated from v2 to v4