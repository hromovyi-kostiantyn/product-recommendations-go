services:
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      - DB_HOST='${DB_HOST}'
      - DB_PORT='${DB_PORT}'
      - DB_USER='${DB_USER}'
      - DB_PASSWORD='${DB_PASSWORD}'
      - DB_NAME='${DB_NAME}'
      - APP_PORT='${APP_PORT}'
    networks:
      - app-network
    volumes:
      - .:/app

  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER='${DB_USER}'
      - POSTGRES_PASSWORD='${DB_PASSWORD}'
      - POSTGRES_DB='${DB_PASSWORD}'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration:
    build:
      context: .
      dockerfile: docker/migration/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST='${DB_HOST}'
      - DB_PORT='${DB_PORT}'
      - DB_USER='${DB_USER}'
      - DB_PASSWORD='${DB_PASSWORD}'
      - DB_NAME='${DB_NAME}'
    networks:
      - app-network
    command: ["go", "run", "migrations/migrate.go"]

#  seeder:
#    build:
#      context: .
#      dockerfile: docker/seed/Dockerfile
#    depends_on:
#      - migration
#    environment:
#      - DB_HOST='${DB_HOST}'
#      - DB_PORT='${DB_PORT}'
#      - DB_USER='${DB_USER}'
#      - DB_PASSWORD='${DB_PASSWORD}'
#      - DB_NAME='${DB_NAME}'
#    networks:
#      - app-network
#    command: ["go", "run", "scripts/seed.go"]

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: